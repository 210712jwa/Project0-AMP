package com.revature.dao;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.util.ArrayList;
import java.util.List;

import com.revature.dto.AddOrEditAccountDTO;
import com.revature.model.Account;
import com.revature.util.ConnectionUtility;

public class AccountDAOImpl implements AccountDAO {

//	private AccountDAO accountDao;

	@Override
	public List<Account> getAllAccounts(int clientId) throws SQLException {
		List<Account> accounts = new ArrayList<>();

		try (Connection con = ConnectionUtility.getConnection()) {

			String sql = "SELECT * FROM `proj-0-banking`.accounts WHERE clientId = ?";

			PreparedStatement pstmt = con.prepareStatement(sql);

			pstmt.setInt(1, clientId);

			ResultSet rs = pstmt.executeQuery();

			while (rs.next()) {
				int accId = rs.getInt("accountId");
				String accType = rs.getString("accType");
				double balance = rs.getDouble("balance");
				int client = rs.getInt("clientId");

				Account acc = new Account(accId, accType, balance, client);
				accounts.add(acc);
			}

			return accounts;
		}

	}

	@Override
	public Account getAccountById(int clientId, int accId) throws SQLException {

		try (Connection con = ConnectionUtility.getConnection()) {
			String sql = "SELECT * FROM `proj-0-banking`.accounts a WHERE a.clientId = ? AND a.accountid = ?";

			PreparedStatement pstmt = con.prepareStatement(sql);

			pstmt.setInt(1, clientId);
			pstmt.setInt(2, accId);

			ResultSet rs = pstmt.executeQuery();

			if (rs.next()) {
				int client = rs.getInt("clientId");
				String accT = rs.getString("accType");
				double bal = rs.getDouble("balance");
				int accountId = rs.getInt("accountid");

				Account account = new Account(accountId, accT, bal, client);

				return account;
			}

			else {
				return null;
			}
		}
	}

	@Override
	public Account addAccount(int clientId, AddOrEditAccountDTO acc) throws SQLException {
		try (Connection con = ConnectionUtility.getConnection()) {
			String sql = "INSERT INTO `proj-0-banking`.accounts (clientId, accType, balance) VALUES (?,?,?)";
			PreparedStatement pstmt = con.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
			
			pstmt.setInt(1,  acc.getClientId());
			pstmt.setString(2, acc.getAccType());
			pstmt.setDouble(3, acc.getBalance());
			
			int newRecord = pstmt.executeUpdate();
			
			if (newRecord != 1) {
				throw new SQLException("Could not insert a new account");
			}
			
			ResultSet generatedKeys = pstmt.getGeneratedKeys();
			if (generatedKeys.next()) {
				Account createdAccount = new Account(acc.getClientId(), acc.getAccType(), acc.getBalance(), generatedKeys.getInt(4));
				return createdAccount;
				
			}
			else {
				throw new SQLException("Autogenerated id could not be obtained for account");
			}
		}
	}

	@Override
	public Account editAccount(int clientId, int accId, AddOrEditAccountDTO acc) throws SQLException {
		try (Connection con = ConnectionUtility.getConnection()) {
			String sql = "INSERT INTO `proj-0-banking`.accounts (clientId, accType, balance) VALUES (?,?,?)";
			PreparedStatement pstmt = con.prepareStatement(sql);
			
			pstmt.setInt(1,  clientId);
			pstmt.setString(2, acc.getAccType());
			pstmt.setDouble(3, acc.getBalance());
			pstmt.setInt(4, accId);
			
			int updatedRecord = pstmt.executeUpdate();
			
			if (updatedRecord != 1) {
				throw new SQLException("Could not update the account");
			}
			
			
				Account updatedAccount = new Account(clientId, acc.getAccType(), acc.getBalance(), accId);
				return updatedAccount;
		}
	}

	@Override
	public void deleteAccount(int clientId, int accId) throws SQLException {
		try (Connection con = ConnectionUtility.getConnection()) {
			String sql = "DELETE FROM `proj-0-banking`.accounts WHERE clientid = ? AND accid = ?";
			PreparedStatement pstmt = con.prepareStatement(sql);
			
			pstmt.setInt(1, clientId);
			pstmt.setInt(4, accId);
			
			int deletedRecords = pstmt.executeUpdate();
			
			if (deletedRecords != 1) {
				throw new SQLException("Record was not able to be deleted");
			}
		}
	}

}
